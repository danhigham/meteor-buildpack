#!/usr/bin/env ruby

require 'fileutils'
require 'tmpdir'
require 'json'

$stdout.sync = true

def ensure_profile_d(build_path)
  profile_dir = "#{build_path}/.profile.d"
  FileUtils.mkdir_p profile_dir

  return profile_dir
end

def install_meteor(build_path, cache_path)
  puts "-----> Installing Meteor"

  FileUtils.mkdir_p ENV['HOME']

  meteor_build_dir = "#{build_path}/meteor"
  FileUtils.mkdir_p meteor_build_dir

  `curl https://install.meteor.com | HOME=#{meteor_build_dir} /bin/sh 2>&1`
end

def setup_environment(build_path)
  puts "-----> Setting up environment"

  app = JSON.parse(ENV["VCAP_APPLICATION"])
  services = JSON.parse(ENV["VCAP_SERVICES"])
  mongo_url = services.find { |key,value| value[0]['tags'].include? 'mongodb' }[1][0]['credentials']['uri']

  profile_dir = ensure_profile_d build_path

  profile_content = <<-eos
  #!/usr/bin/env ruby
  export ROOT_URL=#{app["application_uris"][0]}
  export MONGO_URL=#{mongo_url}
  eos

  File.open("#{profile_dir}/meteor.sh", 'w') {|f| f.write(profile_content) }
end

def sync_app_from_bucket(build_path, cache_path)

  puts "-----> Syncing from S3 bucket"

  # if S3 bucket exists, download files
  s3_env_keys = %w{ AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY S3_BUCKET }
  return unless s3_env_keys.collect{ |e| ENV.has_key? e }.all?

  begin
    Gem.use_paths "#{cache_path}/.gem"
    require 'aws/s3'
  rescue LoadError
    puts "-----> Installing rbenv and AWS::S3"
    install_rbenv cache_path

    pid = spawn({'GEM_HOME' => "#{cache_path}/.gem"}, "gem install aws-s3")
    Process.wait pid
    retry
  end

  include AWS::S3

  AWS::S3::Base.establish_connection!(
    :access_key_id     => ENV['AWS_ACCESS_KEY_ID'],
    :secret_access_key => ENV['AWS_SECRET_ACCESS_KEY']
  )

  Bucket.create(ENV['S3_BUCKET'])
  bucket = Bucket.find(ENV['S3_BUCKET'])

  bucket.objects.each { |o| folder?(o.key) ? create_folder(build_path, o) : download(o) }

end

def create_folder(build_path, o)
  puts "       create folder #{o.key}"
  FileUtils.mkdir_p("#{build_path}/#{o.key}")
end

def download(s3_obj)
  puts "       download #{s3_obj.key}"
  File.open(s3_obj.key, "wb") do |file|
    S3Object.stream(s3_obj.key, ENV['S3_BUCKET']) do |chunk|
      file.write chunk
    end
  end
end

def folder?(path)
  path[path.length - 1] == "/"
end

def install_rbenv(cache_path)
  FileUtils.remove_dir "#{cache_path}/.rbenv" if File.exists? "#{cache_path}/.rbenv"
  FileUtils.mkdir_p "#{cache_path}/.gem"

  `git clone https://github.com/sstephenson/rbenv.git #{cache_path}/.rbenv`
  `#{cache_path}/.rbenv/bin/rbenv init -`
end

install_meteor ARGV[0], ARGV[1]
setup_environment ARGV[0]
sync_app_from_bucket ARGV[0], ARGV[0]
